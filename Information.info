Lessons:
    https://www.youtube.com/playlist?list=PLAma_mKffTOR5o0WNHnY0mTjKxnCgSXrZ

Lesson 2:
    1. Create Maven project with webapp archetype (IntelliJ IDEA Ultimate edition)
    2. Install dependencies to pom.xml:
        - Spring core
        - Spring beans
        - Spring context
    3. New directory 'src/main/resources'. Mark it as 'Resources Root'
    4. New directory 'src/main/java'. Mark it as 'Sources Root'
    5. New Package 'src/main/java/by.springcourse' (As GroupID)
    6. Create class TestBean with private String field 'name', constructor, setter and getter
    7. Create config file 'src/main/resources/applicationContext.xml' with code
    8. Create class TestSpring with code
    9. Run Main method -> My name to console

Lesson 4:
    1. Delete class TestBean
    2. Create interface Music
    3. Create class ClassicalMusic implements Music
    4. Create class RockMusic implements Music
    5. Create class MusicPlayer
    6. Update 'applicationContext.xml'
    7. Update class TestSpring
    8. Run Main method -> Playing music to console
    9. Do changes in 'applicationContext.xml' -> Run Main -> Playing another music to console
    HomeWork: Add another music style -> // Done

Lesson 5:
    1. Create new bean musicPlayerBean in 'applicationContext.xml'
    2. Update class TestSpring
    3. Run Main method -> Playing music to console

Lesson 6:
    1. Add setter to class MusicPlayer and empty constructor
    2. Update 'applicationContext.xml'
    3. Run Main method -> Playing music to console
    4. Create fields 'name' and 'volume' in class MusicPlayer
    5. Add setters and getters for these fields
    6. Add properties to bean musicPlayerBean in 'applicationContext.xml'
    7. Update class TestSpring
    8. Run Main method -> Playing music to console + name and volume
    9. Create file 'src/main/resources/musicPlayer.properties' with variables
    10. Update 'applicationContext.xml'
    11. Run Main method -> Playing music to console + name and volume
    HomeWork: Make list with genres and run musicPlayer with all these genres -> // Done

Lesson 7:
    1. Make secondMusicPlayer with id from musicPlayer
    2. Compare two objects -> equals, because scope is singleton
    3. Change scope to prototype
    4. Compare two objects -> not equals, because scope is prototype

Lesson 8:
    1. Add init and destroy methods to class MetalMusic
    2. Add these methods to 'applicationContext.xml'
    3. Run Main method -> LOG messages from these methods to console
    HomeWork: Check runs init and destroy methods on beans with prototype and singleton scope -> // Done
    4. Add private constructor in class MetalMusic
    5. Add method to create new MetalMusic object
    6. Add this method to 'applicationContext.xml'
    7. Run Main method -> All works

Lesson 9:
    1. Turn off (as a comment) beans from 'applicationContext.xml' and connect annotation context
    2. Add annotations @Component to classes
    3. Turn off (as a comment) old actions from TestSpring
    4. Add new code in TestSpring
    5. Run Main method -> All songs play

Lesson 10:
    1. Add annotations @Component to class MusicPlayer
    2. Remake class MusicPlayer with annotation @Autowired
    3. Turn off (as a comment) old actions from TestSpring and add new actions
    4. Run Main method -> Song plays
    5. Return changes in class MusicPlayer with annotation @Autowired
    6. Turn off (as a comment) annotations @Component in another classes
    7. Run Main method -> Song plays
    8. Return annotation @Component in another classes
    9. Run Main method -> ERROR
    10. Turn off (as a comment) annotations @Component in another classes
    11. Run Main method -> Song plays
    12. Replace annotation @Autowired to setter
    13. Run Main method -> Song plays
    14. Replace annotation @Autowired to field
    15. Run Main method -> Song plays
    16. Create new fields and add another constructor with 3 arguments and remake method playMusic
    17. Return annotation @Component in another classes
    18. Run Main method -> All songs play
    19. Create class Computer with constructor and toString()
    20. Remake method playMusic
    21. Turn off (as a comment) old actions from TestSpring and add new actions
    22. Run Main method -> Song plays

Lesson 11:
    1. Remake class MusicPlayer with annotations @Autowired and @Qualifier in field music
    2. Run Main method -> Song plays
    3. Remake class MusicPlayer with annotations @Autowired and @Qualifier in constructor
    4. Run Main method -> All songs play
    HomeWork: Lists with songs every genres, all beans in MusicPlayer, enum with 3 genres, playMusic play random song
        depending enum genre -> // Done
    5. Delete all code as comments

Lesson 12:
    1. Remake class MusicPlayer with annotations @Value in fields name and volume
    2. Turn off (as a comment) old actions from TestSpring
    3. Add new code in TestSpring
    4. Run Main method -> name and volume was written
    5. Add annotation @Scope("singleton") to MetalMusic class
    6. Create 2 beans MetalMusic and check their scopes -> 1 object
    7. Change annotation with @Scope("prototype") in MetalMusic class
    8. Check their scopes -> 2 objects
    9. Delete annotation @Scope
    10. Remake class MetalMusic with init and destroy methods and annotations
    11. Install dependency in pom.xml -> Javax Annotation API
    12. Change code in TestSpring
    13. Run Main method -> init and destroy methods work

Lesson 13:
    1.